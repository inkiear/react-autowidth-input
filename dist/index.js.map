{"version":3,"sources":["../src/AutowidthInput.tsx"],"names":["useState","useEffect","useRef","useLayoutEffect","forwardRef","mergeRefs","jsx","jsxs","sizerStyle","AutowidthInput","extraWidth","wrapperClassName","wrapperStyleProp","onAutosize","placeholderIsMinWidth","minWidth","props","forwardedRef","_a","inputRef","sizerRef","placeholderSizerRef","input","setInput","inputWidth","setInputWidth","usedValue","handleInput","computedStyle","_b","sizerWidth","placeholderWidth","width","wrapperStyle","inputStyle"],"mappings":"AAAA,OAIE,YAAAA,EACA,aAAAC,EACA,UAAAC,EACA,mBAAAC,EACA,cAAAC,MACK,QACP,OAAS,aAAAC,MAAiB,mBAwIpB,OAKE,OAAAC,EALF,QAAAC,MAAA,oBAxHN,IAAMC,EAA4B,CAChC,SAAU,WACV,IAAK,EACL,KAAM,EACN,WAAY,SACZ,OAAQ,EACR,SAAU,SACV,WAAY,KACd,EAKaC,EAAiBL,EAC5B,CACE,CACE,WAAAM,EAAa,GACb,iBAAAC,EACA,aAAcC,EACd,WAAAC,EACA,sBAAAC,EACA,SAAAC,EAAW,KACRC,CACL,EACAC,IACG,CAnDP,IAAAC,EAoDI,IAAMC,EAAWjB,EAAyB,IAAI,EACxCkB,EAAWlB,EAAuB,IAAI,EACtCmB,EAAsBnB,EAAuB,IAAI,EAEjD,CAACoB,EAAOC,CAAQ,EAAIvB,EAAiB,EAAE,EACvC,CAACwB,EAAYC,CAAa,EAAIzB,EAAS,CAAC,EAExC0B,EAAY,GAAGV,EAAM,OAASM,IAE9BK,EAAe,GAA2C,CAC9DJ,EAAS,EAAE,OAAO,KAAK,EAEnBP,EAAM,UAAUA,EAAM,SAAS,CAAC,CACtC,EAGAb,EAAgB,IAAM,CACpB,GAAIgB,EAAS,SAAWC,EAAS,QAAS,CACxC,IAAMQ,EAAgB,OAAO,iBAAiBT,EAAS,OAAO,EAE9DC,EAAS,QAAQ,MAAM,SAAWQ,EAAc,SAChDR,EAAS,QAAQ,MAAM,WAAaQ,EAAc,WAClDR,EAAS,QAAQ,MAAM,WAAaQ,EAAc,WAClDR,EAAS,QAAQ,MAAM,UAAYQ,EAAc,UACjDR,EAAS,QAAQ,MAAM,cAAgBQ,EAAc,cACrDR,EAAS,QAAQ,MAAM,cAAgBQ,EAAc,aACvD,CACF,EAAG,CAAC,CAAC,EAEL3B,EAAU,IAAM,CAjFpB,IAAAiB,EAAAW,EAkFM,IAAMC,GAAaZ,EAAAE,EAAS,UAAT,YAAAF,EAAkB,YAC/Ba,GAAmBF,EAAAR,EAAoB,UAApB,YAAAQ,EAA6B,YAEtD,GAAIC,GAAcJ,EAAU,OAAQ,CAGlC,IAAIM,EAAQF,EAGVhB,GACAiB,GACAD,EAAaC,GACbV,EAAoB,UAEpBW,EAAQD,GAGNC,EAAQ,CAACjB,IACXiB,EAAQ,CAACjB,GAGPiB,IACFP,EAAcO,GAAQ,CAACtB,CAAU,EAC7BG,GAAYA,EAAWmB,CAAK,EAEpC,MACEhB,EAAM,aACNe,GACAjB,GAIAW,EAAc,KAAK,IAAI,CAACV,EAAUgB,CAAgB,GAAI,CAACrB,CAAU,EAE7DG,GAAYA,EAAWkB,CAAgB,GAClCX,EAAS,UAGlBK,EAAc,CAACV,GAAW,CAACL,CAAU,EACjCG,GAAYA,EAAW,CAACE,CAAQ,EAExC,EAAG,CACDW,EACAV,EAAM,YACNN,EACAI,EACAD,EACAY,EACAV,CACF,CAAC,EAED,IAAMkB,EAA8B,CAClC,GAAGrB,EACH,SAAU,WACV,UAASM,EAAAF,EAAM,QAAN,YAAAE,EAAa,UAAW,cACnC,EAEMgB,EAA4B,CAChC,UAAW,cACX,MAAOV,EACP,GAAGR,EAAM,KACX,EAEA,OACET,EAAC,OACC,UAAWI,EACX,MAAOsB,EACP,cAAY,UAEZ,UAAA3B,EAAC,OAAI,MAAOE,EAAY,IAAKY,EAAU,cAAY,QAChD,SAAAM,EACH,EACApB,EAAC,SACE,GAAGU,EACJ,IAAKX,EAAU,CAACc,EAAUF,CAAY,CAAC,EACvC,MAAOS,EACP,MAAOQ,EACP,SAAUP,EACV,cAAY,QACd,EACCX,EAAM,YACLV,EAAC,OACC,IAAKe,EACL,MAAOb,EACP,cAAY,oBAEX,SAAAQ,EAAM,YACT,EACE,MACN,CAEJ,CACF","sourcesContent":["import React, {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  CSSProperties,\n  useState,\n  useEffect,\n  useRef,\n  useLayoutEffect,\n  forwardRef,\n} from \"react\";\nimport { mergeRefs } from \"react-merge-refs\";\n\ninterface AutowidthInputProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {\n  extraWidth?: number | string;\n  minWidth?: number | string;\n  onAutosize?: (newWidth: number) => void;\n  placeholderIsMinWidth?: boolean;\n  value?: string | number;\n  wrapperClassName?: string;\n  wrapperStyle?: CSSProperties;\n}\n\nconst sizerStyle: CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  visibility: \"hidden\",\n  height: 0,\n  overflow: \"scroll\",\n  whiteSpace: \"pre\",\n};\n\n/**\n * Automatically sized input field.\n */\nexport const AutowidthInput = forwardRef<HTMLInputElement, AutowidthInputProps>(\n  (\n    {\n      extraWidth = 16,\n      wrapperClassName,\n      wrapperStyle: wrapperStyleProp,\n      onAutosize,\n      placeholderIsMinWidth,\n      minWidth = 0,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const sizerRef = useRef<HTMLDivElement>(null);\n    const placeholderSizerRef = useRef<HTMLDivElement>(null);\n\n    const [input, setInput] = useState<string>(\"\");\n    const [inputWidth, setInputWidth] = useState(0);\n\n    const usedValue = `${props.value ?? input}`;\n\n    const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setInput(e.target.value);\n\n      if (props.onChange) props.onChange(e);\n    };\n\n    /* Copy styles of the input field to the sizer, ensuring that the width of the input adjusts accordingly */\n    useLayoutEffect(() => {\n      if (inputRef.current && sizerRef.current) {\n        const computedStyle = window.getComputedStyle(inputRef.current);\n\n        sizerRef.current.style.fontSize = computedStyle.fontSize;\n        sizerRef.current.style.fontFamily = computedStyle.fontFamily;\n        sizerRef.current.style.fontWeight = computedStyle.fontWeight;\n        sizerRef.current.style.fontStyle = computedStyle.fontStyle;\n        sizerRef.current.style.letterSpacing = computedStyle.letterSpacing;\n        sizerRef.current.style.textTransform = computedStyle.textTransform;\n      }\n    }, []);\n\n    useEffect(() => {\n      const sizerWidth = sizerRef.current?.scrollWidth;\n      const placeholderWidth = placeholderSizerRef.current?.scrollWidth;\n\n      if (sizerWidth && usedValue.length) {\n        /* If the input field has content, update the sizer to match its width  */\n\n        let width = sizerWidth;\n\n        if (\n          placeholderIsMinWidth &&\n          placeholderWidth &&\n          sizerWidth < placeholderWidth &&\n          placeholderSizerRef.current\n        ) {\n          width = placeholderWidth;\n        }\n\n        if (width < +minWidth) {\n          width = +minWidth;\n        }\n\n        if (width) {\n          setInputWidth(width + +extraWidth);\n          if (onAutosize) onAutosize(width);\n        }\n      } else if (\n        props.placeholder &&\n        placeholderWidth &&\n        placeholderIsMinWidth\n      ) {\n        /* If no input value exists, check for placeholder value and update the sizer accordingly  */\n\n        setInputWidth(Math.max(+minWidth, placeholderWidth) + +extraWidth);\n\n        if (onAutosize) onAutosize(placeholderWidth);\n      } else if (sizerRef.current) {\n        /* If no input value or placeholder exists, update the sizer to the width of the \"minWidth\" + \"extraWidth\" prop (default is 16) */\n\n        setInputWidth(+minWidth + +extraWidth);\n        if (onAutosize) onAutosize(+minWidth);\n      }\n    }, [\n      usedValue,\n      props.placeholder,\n      extraWidth,\n      placeholderIsMinWidth,\n      onAutosize,\n      setInputWidth,\n      minWidth,\n    ]);\n\n    const wrapperStyle: CSSProperties = {\n      ...wrapperStyleProp,\n      position: \"relative\",\n      display: props.style?.display ?? \"inline-block\",\n    };\n\n    const inputStyle: CSSProperties = {\n      boxSizing: \"content-box\",\n      width: inputWidth,\n      ...props.style,\n    };\n\n    return (\n      <div\n        className={wrapperClassName}\n        style={wrapperStyle}\n        data-testid=\"wrapper\"\n      >\n        <div style={sizerStyle} ref={sizerRef} data-testid=\"sizer\">\n          {usedValue}\n        </div>\n        <input\n          {...props}\n          ref={mergeRefs([inputRef, forwardedRef])}\n          value={usedValue}\n          style={inputStyle}\n          onChange={handleInput}\n          data-testid=\"input\"\n        />\n        {props.placeholder ? (\n          <div\n            ref={placeholderSizerRef}\n            style={sizerStyle}\n            data-testid=\"placeholder-sizer\"\n          >\n            {props.placeholder}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n);\n\nexport default AutowidthInput;\n"]}