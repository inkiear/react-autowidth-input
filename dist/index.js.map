{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\r\n    DetailedHTMLProps,\r\n    InputHTMLAttributes,\r\n    CSSProperties,\r\n    useState,\r\n    useEffect,\r\n    useRef,\r\n    useLayoutEffect,\r\n    forwardRef,\r\n} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction mergeRefs<T = any>(\r\n    refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\r\n): React.RefCallback<T> {\r\n    return (value) => {\r\n        refs.forEach((ref) => {\r\n            if (typeof ref === \"function\") {\r\n                ref(value);\r\n            } else if (ref != null) {\r\n                (ref as React.MutableRefObject<T | null>).current = value;\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\ninterface AutowidthInputProps\r\n    extends DetailedHTMLProps<\r\n        InputHTMLAttributes<HTMLInputElement>,\r\n        HTMLInputElement\r\n    > {\r\n    extraWidth?: number | string;\r\n    minWidth?: number | string;\r\n    wrapperClassName?: string;\r\n    wrapperStyle?: CSSProperties;\r\n    onAutosize?: (newWidth: number) => void;\r\n    placeholderIsMinWidth?: boolean;\r\n    value?: string | number;\r\n}\r\n\r\nconst sizerStyle: CSSProperties = {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    visibility: \"hidden\",\r\n    height: 0,\r\n    overflow: \"scroll\",\r\n    whiteSpace: \"pre\",\r\n};\r\n\r\n/**\r\n * Automatically sized input field.\r\n */\r\nconst AutowidthInput: React.FC<AutowidthInputProps> = forwardRef<\r\n    HTMLInputElement,\r\n    AutowidthInputProps\r\n>(\r\n    (\r\n        {\r\n            extraWidth = 16,\r\n            wrapperClassName,\r\n            wrapperStyle: wrapperStyleProp,\r\n            onAutosize,\r\n            placeholderIsMinWidth,\r\n            minWidth = 0,\r\n            ...props\r\n        },\r\n        forwardedRef\r\n    ) => {\r\n        const inputRef = useRef<HTMLInputElement>(null);\r\n        const sizerRef = useRef<HTMLDivElement>(null);\r\n        const placeholderSizerRef = useRef<HTMLDivElement>(null);\r\n\r\n        const [input, setInput] = useState<string>(\"\");\r\n        const [inputWidth, setInputWidth] = useState(0);\r\n\r\n        const usedValue = `${props.value ?? input}`;\r\n\r\n        const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setInput(e.target.value);\r\n\r\n            if (props.onChange) props.onChange(e);\r\n        };\r\n\r\n        /* Copy styles of the input field to the sizer, ensuring that the width of the input adjusts accordingly */\r\n        useLayoutEffect(() => {\r\n            if (inputRef.current && sizerRef.current) {\r\n                const computedStyle = window.getComputedStyle(inputRef.current);\r\n\r\n                sizerRef.current.style.fontSize = computedStyle.fontSize;\r\n                sizerRef.current.style.fontFamily = computedStyle.fontFamily;\r\n                sizerRef.current.style.fontWeight = computedStyle.fontWeight;\r\n                sizerRef.current.style.fontStyle = computedStyle.fontStyle;\r\n                sizerRef.current.style.letterSpacing =\r\n                    computedStyle.letterSpacing;\r\n                sizerRef.current.style.textTransform =\r\n                    computedStyle.textTransform;\r\n            }\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            const sizerWidth = sizerRef.current?.scrollWidth;\r\n            const placeholderWidth = placeholderSizerRef.current?.scrollWidth;\r\n\r\n            if (sizerWidth && usedValue.length) {\r\n                /* If the input field has content, update the sizer to match its width  */\r\n\r\n                let width = sizerWidth;\r\n\r\n                if (\r\n                    placeholderIsMinWidth &&\r\n                    placeholderWidth &&\r\n                    sizerWidth < placeholderWidth &&\r\n                    placeholderSizerRef.current\r\n                ) {\r\n                    width = placeholderWidth;\r\n                }\r\n\r\n                if (width < +minWidth) {\r\n                    width = +minWidth;\r\n                }\r\n\r\n                if (width) {\r\n                    setInputWidth(width + +extraWidth);\r\n                    if (onAutosize) onAutosize(width);\r\n                }\r\n            } else if (props.placeholder && placeholderWidth) {\r\n                /* If no input value exists, check for placeholder value and update the sizer accordingly  */\r\n\r\n                setInputWidth(Math.max(+minWidth, placeholderWidth) + +extraWidth);\r\n\r\n                if (onAutosize) onAutosize(placeholderWidth);\r\n            } else if (sizerRef.current) {\r\n                /* If no input value or placeholder exists, update the sizer to the width of the \"extraWidth\" prop (default is 16) */\r\n\r\n                setInputWidth(+extraWidth);\r\n                if (onAutosize) onAutosize(+minWidth);\r\n            }\r\n        }, [\r\n            usedValue,\r\n            props.placeholder,\r\n            extraWidth,\r\n            placeholderIsMinWidth,\r\n            onAutosize,\r\n            setInputWidth,\r\n            minWidth,\r\n        ]);\r\n\r\n        const wrapperStyle: CSSProperties = {\r\n            ...wrapperStyleProp,\r\n            position: \"relative\",\r\n            display: props.style?.display ?? \"inline-block\",\r\n        };\r\n\r\n        const inputStyle: CSSProperties = {\r\n            boxSizing: \"content-box\",\r\n            width: inputWidth,\r\n            ...props.style,\r\n        };\r\n\r\n        return (\r\n            <div\r\n                className={wrapperClassName}\r\n                style={wrapperStyle}\r\n                data-testid=\"wrapper\"\r\n            >\r\n                <div style={sizerStyle} ref={sizerRef} data-testid=\"sizer\">\r\n                    {usedValue}\r\n                </div>\r\n                <input\r\n                    {...props}\r\n                    ref={mergeRefs([inputRef, forwardedRef])}\r\n                    value={usedValue}\r\n                    style={inputStyle}\r\n                    onChange={handleInput}\r\n                    data-testid=\"input\"\r\n                />\r\n                {props.placeholder ? (\r\n                    <div\r\n                        ref={placeholderSizerRef}\r\n                        style={sizerStyle}\r\n                        data-testid=\"placeholder-sizer\"\r\n                    >\r\n                        {props.placeholder}\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nAutowidthInput.propTypes = {\r\n    className: PropTypes.string, // className for the outer element\r\n    defaultValue: PropTypes.any, // default field value\r\n    extraWidth: PropTypes.oneOfType([\r\n        // additional width for input element\r\n        PropTypes.number,\r\n        PropTypes.string,\r\n    ]),\r\n    id: PropTypes.string, // id to use for the input, can be set for consistent snapshots\r\n    wrapperClassName: PropTypes.string, // className for the wrapper element callback for the input element\r\n    wrapperStyle: PropTypes.object, // css styles for the wrapper element\r\n    minWidth: PropTypes.oneOfType([\r\n        // minimum width for input element\r\n        PropTypes.number,\r\n        PropTypes.string,\r\n    ]),\r\n    onAutosize: PropTypes.func, // onAutosize handler: function(newWidth) {}\r\n    onChange: PropTypes.func, // onChange handler: function(event) {}\r\n    placeholder: PropTypes.string, // placeholder text\r\n    placeholderIsMinWidth: PropTypes.bool, // don't collapse size to less than the placeholder\r\n    style: PropTypes.object, // css styles for the outer element\r\n    value: PropTypes.oneOfType([\r\n        // field value\r\n        PropTypes.number,\r\n        PropTypes.string\r\n    ]),\r\n};\r\n\r\nexport default AutowidthInput;\r\n"],"names":["forwardRef","useRef","useState","useLayoutEffect","useEffect","React","PropTypes"],"mappings":"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"}